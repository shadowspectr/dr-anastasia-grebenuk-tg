from aiogram import Router, types, F, Bot
from config_reader import config
from datetime import datetime
from database.db_supabase import Database
from keyboards.admin_keyboards import *

router = Router()
# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
router.message.filter(F.from_user.id == config.admin_id)
router.callback_query.filter(F.from_user.id == config.admin_id)


@router.callback_query(F.data == "admin_today")
async def admin_today_appointments(callback: types.CallbackQuery, db: Database):
    today = datetime.now()
    # –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    appointments = await db.get_appointments_for_day(today)

    if not appointments:
        await callback.message.edit_text("üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.", reply_markup=get_admin_main_keyboard())
        return

    text = f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>\n\n"
    builder = InlineKeyboardBuilder()

    # –¢–µ–ø–µ—Ä—å appointments - —ç—Ç–æ —Å–ø–∏—Å–æ–∫, –∏ —Ü–∏–∫–ª –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
    for app in appointments:
        text += f"‚ñ™Ô∏è {app.appointment_time.strftime('%H:%M')} - {app.client_name} ({app.service_title})\n"
        builder.add(types.InlineKeyboardButton(text=f"{app.appointment_time.strftime('%H:%M')} - {app.client_name}",
                                               callback_data=f"admin_app_{app.id}"))

    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())


@router.callback_query(F.data.startswith("admin_app_"))
async def admin_appointment_details(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]
    # –î–æ–±–∞–≤–ª—è–µ–º await –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    app = await db.get_appointment_by_id(app_id)
    if not app:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!", show_alert=True)
        return

    text = (f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
            f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {app.client_name}\n"
            f"<b>Telegram ID:</b> {app.client_telegram_id}\n"
            f"<b>–£—Å–ª—É–≥–∞:</b> {app.service_title}\n"
            f"<b>–í—Ä–µ–º—è:</b> {app.appointment_time.strftime('%d.%m.%Y %H:%M')}\n"
            f"<b>–°—Ç–∞—Ç—É—Å:</b> {app.status}")

    await callback.message.edit_text(text, reply_markup=get_admin_appointment_actions_keyboard(app.id))


# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é
@router.callback_query(F.data.startswith("admin_complete_"))
async def admin_complete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]
    # –ó–¥–µ—Å—å —Ç–æ–∂–µ –Ω—É–∂–µ–Ω await, —Ç–∞–∫ –∫–∞–∫ update_appointment_status —Ç–æ–∂–µ async
    await db.update_appointment_status(app_id, 'completed')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'", show_alert=True)
    await admin_today_appointments(callback, db)  # –í—ã–∑—ã–≤–∞–µ–º —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞


@router.callback_query(F.data.startswith("admin_cancel_"))
async def admin_cancel(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]
    await db.update_appointment_status(app_id, 'cancelled')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–∞'", show_alert=True)
    await admin_today_appointments(callback, db)


@router.callback_query(F.data.startswith("admin_delete_"))
async def admin_delete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]
    await db.delete_appointment(app_id)
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)
    await admin_today_appointments(callback, db)