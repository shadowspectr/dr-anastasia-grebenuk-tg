# handlers/admin_handlers.py

import logging
from aiogram import Router, types, F, Bot
from config_reader import config
from datetime import datetime
from database.db_supabase import Database
from keyboards.admin_keyboards import *

router = Router()
# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
router.message.filter(F.from_user.id == config.admin_id)
router.callback_query.filter(F.from_user.id == config.admin_id)

logger = logging.getLogger(__name__)


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" ---
@router.callback_query(F.data == "admin_today")
async def admin_today_appointments(callback: types.CallbackQuery, db: Database):
    logger.info(f"Admin {callback.from_user.id} requested today's appointments.")
    today = datetime.now()
    appointments = await db.get_appointments_for_day(today)  # <-- await

    if not appointments:
        await callback.message.edit_text(
            "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç.",
            reply_markup=get_admin_main_keyboard()
        )
        return

    text = f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>\n\n"
    builder = InlineKeyboardBuilder()

    for app in appointments:
        client_name = app.client_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        service_title = app.service_title or "–£—Å–ª—É–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        app_time = app.appointment_time.strftime('%H:%M') if app.appointment_time else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        text += f"‚ñ™Ô∏è {app_time} - {client_name} ({service_title})\n"

        # –í–∞–∂–Ω–æ: –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ app.id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏ —è–≤–ª—è–µ—Ç—Å—è —É–Ω–∏–∫–∞–ª—å–Ω—ã–º –∏–¥–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ç–æ—Ä–æ–º –∑–∞–ø–∏—Å–∏
        builder.add(types.InlineKeyboardButton(
            text=f"{app_time} - {client_name}",
            callback_data=f"admin_app_{app.id}"
        ))

    builder.adjust(1)
    await callback.message.edit_text(text, reply_markup=builder.as_markup())


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ ---
@router.callback_query(F.data.startswith("admin_app_"))
async def admin_appointment_details(callback: types.CallbackQuery, db: Database):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–ø–∏—Å–∏ –∏–∑ callback_data
    try:
        app_id = callback.data.split("_")[2]
    except IndexError:
        logger.error(f"Could not parse appointment ID from callback data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"Admin requested details for appointment id: {app_id}")
    app = await db.get_appointment_by_id(app_id)  # <-- await

    if not app:
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –ü–æ–ø—Ä–æ–±—É–µ–º –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–º–µ—Ä—Ç–≤—ã–µ" –∫–Ω–æ–ø–∫–∏
        await admin_today_appointments(callback, db)
        return

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
    text = (
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n"
        f"<b>ID –∑–∞–ø–∏—Å–∏:</b> `{app.id}`\n"  # –û—Ç–æ–±—Ä–∞–∑–∏–º ID –∑–∞–ø–∏—Å–∏ –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {app.client_name}\n"
        f"<b>Telegram ID:</b> {app.client_telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"
        f"<b>–£—Å–ª—É–≥–∞:</b> {app.service_title}\n"
        f"<b>–í—Ä–µ–º—è:</b> {app.appointment_time.strftime('%d.%m.%Y %H:%M') if app.appointment_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n"
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {app.client_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n"  # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {app.status}\n"
        f"<b>Google Event ID:</b> `{app.google_event_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}`"  # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º Google Event ID
    )

    await callback.message.edit_text(text, reply_markup=get_admin_appointment_actions_keyboard(app.id))


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é ---

@router.callback_query(F.data.startswith("admin_complete_"))
async def admin_complete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    await db.update_appointment_status(app_id, 'completed')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
    await admin_today_appointments(callback, db)


@router.callback_query(F.data.startswith("admin_cancel_"))
async def admin_cancel(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    await db.update_appointment_status(app_id, 'cancelled')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–∞'", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
    await admin_today_appointments(callback, db)


@router.callback_query(F.data.startswith("admin_delete_"))
async def admin_delete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (–∏ –∏–∑ Google Calendar, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ delete_appointment)
    await db.delete_appointment(app_id)
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É –∑–∞–ø–∏—Å–µ–π
    await admin_today_appointments(callback, db)