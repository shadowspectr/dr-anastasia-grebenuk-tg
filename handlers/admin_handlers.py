# handlers/admin_handlers.py

import logging
from aiogram import Router, types, F, Bot
from config_reader import config
from datetime import datetime
from database.db_supabase import Database
from keyboards.admin_keyboards import *

router = Router()
# –§–∏–ª—å—Ç—Ä, —á—Ç–æ–±—ã —ç—Ç–∏ —Ö—ç–Ω–¥–ª–µ—Ä—ã —Ä–∞–±–æ—Ç–∞–ª–∏ —Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–∞
router.message.filter(F.from_user.id == config.admin_id)
router.callback_query.filter(F.from_user.id == config.admin_id)

logger = logging.getLogger(__name__)


# --- –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–π ---
def should_edit_message(current_text: str, new_text: str, current_markup, new_markup):
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ.
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç True, –µ—Å–ª–∏ –∏–∑–º–µ–Ω–µ–Ω–∏—è –µ—Å—Ç—å, –∏–Ω–∞—á–µ False.
    """
    if current_text != new_text:
        return True
    if current_markup != new_markup:
        return True
    return False


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–Ω–æ–ø–∫–∏ "–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è" ---
@router.callback_query(F.data == "admin_today")
async def admin_today_appointments(callback: types.CallbackQuery, db: Database):
    logger.info(f"Admin {callback.from_user.id} requested today's appointments.")
    today = datetime.now()
    appointments = await db.get_appointments_for_day(today)

    if not appointments:
        new_text = "üìÖ –ù–∞ —Å–µ–≥–æ–¥–Ω—è –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–ø–∏—Å–µ–π –Ω–µ—Ç."
        new_markup = get_admin_main_keyboard()
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
        if should_edit_message(callback.message.text, new_text, callback.message.reply_markup, new_markup):
            await callback.message.edit_text(new_text, reply_markup=new_markup)
        else:
            logger.info("Message for 'no appointments today' is already the same. Skipping edit.")
        return

    text_lines = [f"üìÖ <b>–ó–∞–ø–∏—Å–∏ –Ω–∞ —Å–µ–≥–æ–¥–Ω—è ({today.strftime('%d.%m.%Y')}):</b>\n\n"]
    builder = InlineKeyboardBuilder()

    for app in appointments:
        client_name = app.client_name or "–ò–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"
        service_title = app.service_title or "–£—Å–ª—É–≥–∞ –Ω–µ —É–∫–∞–∑–∞–Ω–∞"
        app_time = app.appointment_time.strftime('%H:%M') if app.appointment_time else "–í—Ä–µ–º—è –Ω–µ —É–∫–∞–∑–∞–Ω–æ"

        text_lines.append(f"‚ñ™Ô∏è {app_time} - {client_name} ({service_title})\n")

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ app.id —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        if app.id:
            builder.add(types.InlineKeyboardButton(
                text=f"{app_time} - {client_name}",
                callback_data=f"admin_app_{app.id}"
            ))
        else:
            logger.warning(f"Appointment object is missing 'id' for an item: {app}")

    builder.adjust(1)
    new_text = "".join(text_lines)
    new_markup = builder.as_markup()

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if should_edit_message(callback.message.text, new_text, callback.message.reply_markup, new_markup):
        await callback.message.edit_text(new_text, reply_markup=new_markup)
    else:
        logger.info("Message for 'today appointments' is already the same. Skipping edit.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –¥–µ—Ç–∞–ª–µ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∑–∞–ø–∏—Å–∏ ---
@router.callback_query(F.data.startswith("admin_app_"))
async def admin_appointment_details(callback: types.CallbackQuery, db: Database):
    try:
        app_id = callback.data.split("_")[2]
    except IndexError:
        logger.error(f"Could not parse appointment ID from callback data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –¥–∞–Ω–Ω—ã—Ö.", show_alert=True)
        return

    logger.info(f"Admin requested details for appointment id: {app_id}")
    app = await db.get_appointment_by_id(app_id)

    if not app:
        logger.warning(f"Appointment with ID {app_id} not found for details request.")
        await callback.answer("–ó–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞! –í–æ–∑–º–æ–∂–Ω–æ, –æ–Ω–∞ –±—ã–ª–∞ —É–¥–∞–ª–µ–Ω–∞.", show_alert=True)
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫, —á—Ç–æ–±—ã —É–±—Ä–∞—Ç—å "–º–µ—Ä—Ç–≤—ã–µ" –∫–Ω–æ–ø–∫–∏
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å, –ø—Ä–µ–∂–¥–µ —á–µ–º –≤—ã–∑—ã–≤–∞—Ç—å admin_today_appointments
        # (—á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–π –æ—à–∏–±–∫–∏, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç)
        # –í –¥–∞–Ω–Ω–æ–º —Å–ª—É—á–∞–µ, –ª—É—á—à–µ –ø—Ä–æ—Å—Ç–æ —Å–æ–æ–±—â–∏—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, –∏ –ø—É—Å—Ç—å –æ–Ω —Å–∞–º –æ–±–Ω–æ–≤–∏—Ç.
        # –ò–ª–∏, –º–æ–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –æ—Ç–¥–µ–ª—å–Ω—ã–π —Ö—ç–Ω–¥–ª–µ—Ä –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞.
        # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –æ—Å—Ç–∞–≤–∏–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
        # –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ, —á—Ç–æ–±—ã –æ–Ω –æ–±–Ω–æ–≤–ª—è–ª —Å–ø–∏—Å–æ–∫, –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏.
        # await admin_today_appointments(callback, db) # –≠—Ç–æ –º–æ–∂–µ—Ç –≤—ã–∑–≤–∞—Ç—å —Ç—É –∂–µ –æ—à–∏–±–∫—É, –µ—Å–ª–∏ msg –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è
        return  # –ü—Ä–æ—Å—Ç–æ –≤—ã—Ö–æ–¥–∏–º, –µ—Å–ª–∏ –∑–∞–ø–∏—Å—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞.

    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å –¥–µ—Ç–∞–ª—è–º–∏
    text_parts = [
        f"<b>–î–µ—Ç–∞–ª–∏ –∑–∞–ø–∏—Å–∏:</b>\n\n",
        f"<b>ID –∑–∞–ø–∏—Å–∏:</b> `{app.id}`\n",
        f"<b>–ö–ª–∏–µ–Ω—Ç:</b> {app.client_name}\n",
        f"<b>Telegram ID:</b> {app.client_telegram_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n",
        f"<b>–£—Å–ª—É–≥–∞:</b> {app.service_title}\n",
        f"<b>–í—Ä–µ–º—è:</b> {app.appointment_time.strftime('%d.%m.%Y %H:%M') if app.appointment_time else '–ù–µ —É–∫–∞–∑–∞–Ω–æ'}\n",
        f"<b>–ù–æ–º–µ—Ä —Ç–µ–ª–µ—Ñ–æ–Ω–∞:</b> {app.client_phone or '–ù–µ —É–∫–∞–∑–∞–Ω'}\n",
        f"<b>–°—Ç–∞—Ç—É—Å:</b> {app.status}\n",
        f"<b>Google Event ID:</b> `{app.google_event_id or '–ù–µ —É–∫–∞–∑–∞–Ω'}`"
    ]
    new_text = "".join(text_parts)
    new_markup = get_admin_appointment_actions_keyboard(app.id)

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å
    if should_edit_message(callback.message.text, new_text, callback.message.reply_markup, new_markup):
        await callback.message.edit_text(new_text, reply_markup=new_markup)
    else:
        logger.info(f"Message for appointment details {app.id} is already the same. Skipping edit.")


# --- –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π —Å –∑–∞–ø–∏—Å—å—é ---

@router.callback_query(F.data.startswith("admin_complete_"))
async def admin_complete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    await db.update_appointment_status(app_id, 'completed')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–ó–∞–≤–µ—Ä—à–µ–Ω–∞'", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É, –Ω–æ —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ –µ–≥–æ –æ–±–Ω–æ–≤–∏—Ç—å
    # –ï—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è, edit_text –±—É–¥–µ—Ç –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä–æ–≤–∞–Ω
    await admin_today_appointments(callback, db)  # <-- –ó–¥–µ—Å—å —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞, –µ—Å–ª–∏ —Å–ø–∏—Å–æ–∫ –Ω–µ –∏–∑–º–µ–Ω–∏–ª—Å—è


@router.callback_query(F.data.startswith("admin_cancel_"))
async def admin_cancel(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç—É—Å –∑–∞–ø–∏—Å–∏ –≤ –ë–î
    await db.update_appointment_status(app_id, 'cancelled')
    await callback.answer("–°—Ç–∞—Ç—É—Å –∏–∑–º–µ–Ω–µ–Ω –Ω–∞ '–û—Ç–º–µ–Ω–µ–Ω–∞'", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    await admin_today_appointments(callback, db)  # <-- –ó–¥–µ—Å—å —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞


@router.callback_query(F.data.startswith("admin_delete_"))
async def admin_delete(callback: types.CallbackQuery, db: Database):
    app_id = callback.data.split("_")[2]

    # –£–¥–∞–ª—è–µ–º –∑–∞–ø–∏—Å—å –∏–∑ –ë–î (–∏ –∏–∑ Google Calendar, –µ—Å–ª–∏ —ç—Ç–æ —Ä–µ–∞–ª–∏–∑–æ–≤–∞–Ω–æ –≤ delete_appointment)
    await db.delete_appointment(app_id)
    await callback.answer("–ó–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞!", show_alert=True)

    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ —Å–ø–∏—Å–∫—É
    await admin_today_appointments(callback, db)  # <-- –ó–¥–µ—Å—å —Ç–æ–∂–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—Ä–æ–±–ª–µ–º–∞