# utils/scheduler.py

import logging
from aiogram import Bot
from apscheduler.schedulers.asyncio import AsyncIOScheduler

from database.db_supabase import Database

logger = logging.getLogger(__name__)


async def send_reminders(bot: Bot, db: Database):
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –æ –∑–∞–ø–∏—Å—è—Ö –Ω–∞ –∑–∞–≤—Ç—Ä–∞.
    """
    logger.info("Scheduler job: Checking for reminders...")

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await, —Ç–∞–∫ –∫–∞–∫ –º–µ—Ç–æ–¥ DB —Ç–µ–ø–µ—Ä—å –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π
    appointments_to_remind = await db.get_upcoming_appointments_to_remind()

    if not appointments_to_remind:
        logger.info("No appointments for tomorrow to remind about.")
        return

    sent_count = 0
    for app in appointments_to_remind:
        if app.client_telegram_id:
            try:
                # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è
                text = (
                    f"üîî <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –∑–∞–ø–∏—Å–∏</b>\n\n"
                    f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {app.client_name}! –ù–∞–ø–æ–º–∏–Ω–∞–µ–º, —á—Ç–æ –≤—ã –∑–∞–ø–∏—Å–∞–Ω—ã –∫ –Ω–∞–º –∑–∞–≤—Ç—Ä–∞.\n\n"
                    f"<b>–£—Å–ª—É–≥–∞:</b> {app.service_title}\n"
                    f"<b>–í—Ä–µ–º—è:</b> {app.appointment_time.strftime('%d.%m.%Y –≤ %H:%M')}\n\n"
                    f"–ñ–¥–µ–º –≤–∞—Å!"
                )

                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
                await bot.send_message(app.client_telegram_id, text)

                # –ü–æ–º–µ—á–∞–µ–º, —á—Ç–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ (—Ç–æ–∂–µ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ)
                await db.mark_as_reminded(app.id)

                sent_count += 1
                logger.info(f"Sent reminder for appointment ID {app.id} to user {app.client_telegram_id}")
            except Exception as e:
                logger.error(f"Failed to send reminder for appointment ID {app.id}: {e}")

    logger.info(f"Reminder job finished. Sent {sent_count} reminders.")


def setup_scheduler(bot: Bot, db: Database) -> AsyncIOScheduler:
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞.
    """
    # –£–∫–∞–∑—ã–≤–∞–µ–º —á–∞—Å–æ–≤–æ–π –ø–æ—è—Å, —á—Ç–æ–±—ã –∑–∞–¥–∞—á–∞ –≤—ã–ø–æ–ª–Ω—è–ª–∞—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–µ –≤—Ä–µ–º—è
    scheduler = AsyncIOScheduler(timezone="Europe/Moscow")

    # –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–¥–∞—á—É, –∫–æ—Ç–æ—Ä–∞—è –±—É–¥–µ—Ç –≤—ã–ø–æ–ª–Ω—è—Ç—å—Å—è –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 19:00
    scheduler.add_job(send_reminders, 'cron', hour=19, minute=0, args=(bot, db))

    logger.info("Scheduler configured. Job 'send_reminders' will run daily at 19:00 (Europe/Moscow).")

    return scheduler