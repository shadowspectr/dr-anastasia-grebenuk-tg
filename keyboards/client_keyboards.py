from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta
from aiogram import types


def get_client_main_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


# --- get_services_keyboard –î–û–õ–ñ–ù–ê –ë–´–¢–¨ ASYNC –ò AWAIT'–ò–¢–¨ build_keyboard ---
async def get_services_keyboard(db: Database, category_id: str):  # <-- –§—É–Ω–∫—Ü–∏—è async
    async def get_services():
        return await db.get_services_by_category(category_id)

    async def build_keyboard():
        services = await get_services()
        builder = InlineKeyboardBuilder()
        for service in services:
            builder.add(types.InlineKeyboardButton(
                text=f"{service.title} ({service.price} ‚ÇΩ)",
                callback_data=f"service_{service.id}"
            ))

        builder.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_category_choice"
        ))
        builder.adjust(1)
        return builder.as_markup()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await build_keyboard() ---
    # –§—É–Ω–∫—Ü–∏—è get_services_keyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç markup, –∞ –Ω–µ –∫–æ—Ä—É—Ç–∏–Ω—É.
    # –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ await'–∏—Ç—å build_keyboard.
    return await build_keyboard()  # <-- –ó–¥–µ—Å—å –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω await
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


# --- –§—É–Ω–∫—Ü–∏—è get_date_keyboard –î–û–õ–ñ–ù–ê –ë–´–¢–¨ ASYNC ---
async def get_date_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    today = datetime.now().date()

    # --- –ò–ó–ú–ï–ù–ï–ù–ò–ï: –§–∏–ª—å—Ç—Ä—É–µ–º –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏ ---
    # –î–æ—Å—Ç—É–ø–Ω—ã–µ –¥–Ω–∏: –≤—Ç–æ—Ä–Ω–∏–∫ (1), —á–µ—Ç–≤–µ—Ä–≥ (3), –ø—è—Ç–Ω–∏—Ü–∞ (4)
    # weekday() –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 0 –¥–ª—è –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫–∞, 1 –¥–ª—è –≤—Ç–æ—Ä–Ω–∏–∫–∞, ..., 6 –¥–ª—è –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å—è.
    available_weekdays = {1, 3, 4}  # Tuesday, Thursday, Friday

    days_added = 0  # –°—á–µ—Ç—á–∏–∫, —á—Ç–æ–±—ã –Ω–µ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –ø—É—Å—Ç—ã–µ —Ä—è–¥—ã, –µ—Å–ª–∏ –¥–Ω–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã

    for i in range(1, 15):  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ 2 –Ω–µ–¥–µ–ª–∏ –≤–ø–µ—Ä–µ–¥, —á—Ç–æ–±—ã –≥–∞—Ä–∞–Ω—Ç–∏—Ä–æ–≤–∞—Ç—å 3 –¥–Ω—è
        current_date = today + timedelta(days=i)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Ç–µ–∫—É—â–∏–π –¥–µ–Ω—å –æ–¥–Ω–∏–º –∏–∑ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö
        if current_date.weekday() in available_weekdays:
            date_str = current_date.strftime('%Y-%m-%d')
            builder.add(types.InlineKeyboardButton(
                text=f"{current_date.strftime('%d.%m')} ({current_date.strftime('%a')})",
                callback_data=f"date_{date_str}"
            ))
            days_added += 1
            if days_added % 3 == 0:  # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 3 –¥–Ω—è
                builder.adjust(3)  # –ò–ª–∏ adjust(2) –∏–ª–∏ (1) –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∂–µ–ª–∞–µ–º–æ–≥–æ –≤–∏–¥–∞

    # –ï—Å–ª–∏ –¥–Ω–∏ –±—ã–ª–∏ –¥–æ–±–∞–≤–ª–µ–Ω—ã, —Ç–æ adjust(3) —É–∂–µ –±—ã–ª –≤—ã–∑–≤–∞–Ω
    # –ï—Å–ª–∏ –¥–Ω–µ–π –Ω–µ –Ω–∞—à–ª–æ—Å—å (—Ö–æ—Ç—è –ø—Ä–∏ 15 –¥–Ω—è—Ö —ç—Ç–æ –º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), —Ç–æ adjust –Ω–µ –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º",
        callback_data="back_to_service_choice"
    ))
    # Adjust –¥–ª—è –∫–Ω–æ–ø–∫–∏ "–ù–∞–∑–∞–¥"
    builder.adjust(1)  # –û–±—ã—á–Ω–æ –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –∏–¥–µ—Ç –æ—Ç–¥–µ–ª—å–Ω–æ

    return builder.as_markup()


# --- –§—É–Ω–∫—Ü–∏—è get_time_slots_keyboard ---
# –û–Ω–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å async, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç db.get_appointments_for_day
async def get_time_slots_keyboard(target_date: datetime, db: Database):
    builder = InlineKeyboardBuilder()

    try:
        # --- –í–ê–ñ–ù–û: db.get_appointments_for_day - ASYNC –ú–ï–¢–û–î ---
        appointments_on_day = await db.get_appointments_for_day(target_date)
        booked_times = {app.appointment_time.strftime('%H:%M') for app in appointments_on_day if app.appointment_time}
    except Exception as e:
        logger.error(f"Error fetching appointments for time slot check on {target_date.date()}: {e}")
        booked_times = set()

    start_hour = 9
    end_hour = 18
    slot_interval_minutes = 60

    current_time = target_date.replace(hour=start_hour, minute=0, second=0, microsecond=0)

    while current_time.hour < end_hour:
        slot_time_str = current_time.strftime('%H:%M')

        if slot_time_str not in booked_times:
            builder.add(types.InlineKeyboardButton(
                text=slot_time_str,
                callback_data=f"time_{slot_time_str}"
            ))
        else:
            pass  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã

        current_time += timedelta(minutes=slot_interval_minutes)

    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è",
        callback_data="back_to_date_choice"
    ))
    builder.adjust(3)
    return builder.as_markup()


def get_confirmation_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()