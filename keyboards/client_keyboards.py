from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta


def get_client_main_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


async def get_services_keyboard(db: Database, category_id: str):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    services = await db.get_services_by_category(category_id)
    for service in services:
        builder.add(
            InlineKeyboardButton(text=f"{service.title} ({service.price} ‚ÇΩ)", callback_data=f"service_{service.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="client_book"))
    builder.adjust(1)
    return builder.as_markup()


def get_date_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    today = datetime.now()
    builder.add(InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today.strftime('%Y-%m-%d')}"))
    builder.add(
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{(today + timedelta(days=1)).strftime('%Y-%m-%d')}"))
    return builder.as_markup()


# --- –ù–û–í–ê–Ø –§–£–ù–ö–¶–ò–Ø –î–õ–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---
def get_date_keyboard(db: Database):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–∞—Ç–∞–º–∏ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤–ø–µ—Ä–µ–¥, –∫—Ä–æ–º–µ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è,
    –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–æ–ª—å–∫–æ –¥–æ—Å—Ç—É–ø–Ω—ã–µ –¥–ª—è –∑–∞–ø–∏—Å–∏ –¥–Ω–∏.
    """

    async def build_keyboard():
        builder = InlineKeyboardBuilder()
        today = datetime.now().date()

        # –ü–æ–∫–∞–∂–µ–º –∫–Ω–æ–ø–∫–∏ –Ω–∞ 7 –¥–Ω–µ–π –≤–ø–µ—Ä–µ–¥ (–±–µ–∑ —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è)
        for i in range(1, 8):  # –û—Ç 1 –¥–æ 7 –¥–Ω–µ–π
            current_date = today + timedelta(days=i)
            date_str = current_date.strftime('%Y-%m-%d')

            # --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –¥–Ω—è ---
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–ø–∏—Å–∏ –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å, —á—Ç–æ–±—ã –ø–æ–Ω—è—Ç—å, —Å–≤–æ–±–æ–¥–µ–Ω –ª–∏ –æ–Ω.
            # –ï—Å–ª–∏ –Ω–∞–º –Ω—É–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å —Ç–æ–ª—å–∫–æ –¥–Ω–∏, –≥–¥–µ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã,
            # —Ç–æ –∑–¥–µ—Å—å –Ω—É–∂–Ω–æ —Å–¥–µ–ª–∞—Ç—å –∑–∞–ø—Ä–æ—Å –∫ –ë–î.
            # –ü—Ä–µ–¥–ø–æ–ª–æ–∂–∏–º, —á—Ç–æ –º—ã —Ö–æ—Ç–∏–º –ø–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –¥–Ω–∏, –∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏
            # –ø—Ä–æ–≤–µ—Ä–∏–º —É–∂–µ –ø—Ä–∏ –≤—ã–±–æ—Ä–µ –≤—Ä–µ–º–µ–Ω–∏.
            # –ï—Å–ª–∏ –∂–µ —Ö–æ—Ç–∏–º —Ñ–∏–ª—å—Ç—Ä–æ–≤–∞—Ç—å –¥–Ω–∏:
            # appointments_on_day = await db.get_appointments_for_day(current_date)
            # if len(appointments_on_day) < MAX_SLOTS_PER_DAY: # –ï—Å–ª–∏ –µ—Å—Ç—å —Å–≤–æ–±–æ–¥–Ω—ã–µ —Å–ª–æ—Ç—ã
            #     builder.add(types.InlineKeyboardButton(
            #         text=f"{current_date.strftime('%d.%m')} ({current_date.strftime('%a')})",
            #         callback_data=f"date_{date_str}"
            #     ))
            # else:
            #     # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã–π –∏–ª–∏ –≤–æ–æ–±—â–µ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å
            #     pass

            # –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –¥–æ–±–∞–≤–ª—è–µ–º –≤—Å–µ –¥–Ω–∏ –Ω–µ–¥–µ–ª–∏
            builder.add(types.InlineKeyboardButton(
                text=f"{current_date.strftime('%d.%m')} ({current_date.strftime('%a')})",  # –ü—Ä–∏–º–µ—Ä: 23.07 (Tue)
                callback_data=f"date_{date_str}"
            ))

        # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ —É—Å–ª—É–≥–∏
        builder.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º",
            callback_data="back_to_service_choice"  # –ù—É–∂–Ω–æ –±—É–¥–µ—Ç –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ—Ç callback –≤ client_handlers
        ))
        builder.adjust(3)  # –ù–∞–ø—Ä–∏–º–µ—Ä, 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥—É
        return builder.as_markup()

    return build_keyboard()


async def get_time_slots_keyboard(target_date: datetime, db: Database):
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ –≤—Ä–µ–º–µ–Ω–∏ –Ω–∞ –≤—ã–±—Ä–∞–Ω–Ω—ã–π –¥–µ–Ω—å,
    —É—á–∏—Ç—ã–≤–∞—è —É–∂–µ –∑–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏.
    """
    builder = InlineKeyboardBuilder()

    # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ —É –Ω–∞—Å –µ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è —Ä–∞–±–æ—Ç—ã, –Ω–∞–ø—Ä–∏–º–µ—Ä, —Å 9:00 –¥–æ 18:00
    # –∏ –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏, –Ω–∞–ø—Ä–∏–º–µ—Ä, 1 —á–∞—Å.
    # –ò–ª–∏ –∂–µ, —á—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å–ª–æ—Ç–∞—Ö –±–µ—Ä–µ—Ç—Å—è –∏–∑ –ë–î.

    # --- –õ–û–ì–ò–ö–ê –û–ü–†–ï–î–ï–õ–ï–ù–ò–Ø –°–í–û–ë–û–î–ù–´–• –°–õ–û–¢–û–í ---
    # 1. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–Ω—è—Ç—ã–µ –∑–∞–ø–∏—Å–∏ –Ω–∞ target_date
    try:
        # –ó–¥–µ—Å—å –Ω—É–∂–µ–Ω –º–µ—Ç–æ–¥, –∫–æ—Ç–æ—Ä—ã–π –≤–µ—Ä–Ω–µ—Ç —Å–ø–∏—Å–æ–∫ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω,
        # –∏–ª–∏ –∂–µ –ø—Ä–æ—Å—Ç–æ —Å–ø–∏—Å–æ–∫ –æ–±—ä–µ–∫—Ç–æ–≤ Appointment –Ω–∞ —ç—Ç–æ—Ç –¥–µ–Ω—å.
        # –ï—Å–ª–∏ db.get_appointments_for_day –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–ø–∏—Å–æ–∫ Appointment:
        appointments_on_day = await db.get_appointments_for_day(target_date)

        # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –∑–∞–Ω—è—Ç—ã—Ö –≤—Ä–µ–º–µ–Ω –¥–ª—è –±—ã—Å—Ç—Ä–æ–≥–æ –ø–æ–∏—Å–∫–∞
        # –§–æ—Ä–º–∞—Ç: "HH:MM"
        booked_times = {app.appointment_time.strftime('%H:%M') for app in appointments_on_day if app.appointment_time}

    except Exception as e:
        logger.error(f"Error fetching appointments for time slot check on {target_date.date()}: {e}")
        booked_times = set()  # –ï—Å–ª–∏ –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞, —Å—á–∏—Ç–∞–µ–º, —á—Ç–æ –≤—Å–µ —Å–≤–æ–±–æ–¥–Ω–æ (–∏–ª–∏ –Ω–∞–æ–±–æ—Ä–æ—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—à–∏–±–∫—É)

    # --- –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ —Å–ª–æ—Ç—ã ---
    # –î–æ–ø—É—Å—Ç–∏–º, —Ä–∞–±–æ—á–∏–π –¥–µ–Ω—å —Å 9:00 –¥–æ 18:00, –∏–Ω—Ç–µ—Ä–≤–∞–ª 1 —á–∞—Å
    start_hour = 9
    end_hour = 18
    slot_interval_minutes = 60  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –∑–∞–ø–∏—Å—è–º–∏

    current_time = target_date.replace(hour=start_hour, minute=0, second=0, microsecond=0)

    while current_time.hour < end_hour:
        slot_time_str = current_time.strftime('%H:%M')

        if slot_time_str not in booked_times:
            builder.add(types.InlineKeyboardButton(
                text=slot_time_str,
                callback_data=f"time_{slot_time_str}"
            ))
        else:
            # –ú–æ–∂–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –∫–∞–∫ –∑–∞–Ω—è—Ç–æ–µ, –∏–ª–∏ –ø—Ä–æ—Å—Ç–æ –Ω–µ –¥–æ–±–∞–≤–ª—è—Ç—å –∫–Ω–æ–ø–∫—É
            pass  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã

        current_time += timedelta(minutes=slot_interval_minutes)

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥" –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–Ω—è
    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è",
        callback_data="back_to_date_choice"  # –≠—Ç–æ—Ç callback —É–∂–µ –µ—Å—Ç—å
    ))
    builder.adjust(3)  # –ù–∞–ø—Ä–∏–º–µ—Ä, 3 —Å–ª–æ—Ç–∞ –≤ —Ä—è–¥—É
    return builder.as_markup()


def get_confirmation_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()