# keyboards/client_keyboards.py

from aiogram.types import InlineKeyboardButton, ReplyKeyboardMarkup, KeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta, date
from typing import List

# –ò–º–ø–æ—Ä—Ç—ã –¥–ª—è –∫–∞–ª–µ–Ω–¥–∞—Ä—è
from aiogram_calendar import SimpleCalendar, SimpleCalendarCallback


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —É—Å–ª—É–≥ ---

def get_client_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


async def get_services_keyboard(db: Database, category_id: str):
    builder = InlineKeyboardBuilder()
    services = await db.get_services_by_category(category_id)
    for service in services:
        builder.add(
            InlineKeyboardButton(text=f"{service.title} ({service.price} ‚ÇΩ)", callback_data=f"service_{service.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="client_book"))
    builder.adjust(1)
    return builder.as_markup()


# --- –£–õ–¨–¢–ò–ú–ê–¢–ò–í–ù–û –ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø –ö–ê–õ–ï–ù–î–ê–†–Ø ---

async def get_calendar_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∏–Ω–ª–∞–π–Ω-–∫–∞–ª–µ–Ω–¥–∞—Ä—å –¥–ª—è –≤—ã–±–æ—Ä–∞ –¥–∞—Ç—ã.
    """
    # –í—ã–∑—ã–≤–∞–µ–º –∫–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –∏ –º–µ—Ç–æ–¥ start_calendar –ë–ï–ó –∫–∞–∫–∏—Ö-–ª–∏–±–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤.
    return SimpleCalendar().start_calendar()


def get_time_slots_keyboard(target_date: datetime, busy_slots: List[datetime]):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏.
    """
    builder = InlineKeyboardBuilder()
    busy_times = [slot.astimezone().time() for slot in busy_slots]

    time_slots = []
    for hour in range(9, 19):
        for minute in [0, 30]:
            current_slot_time = datetime.strptime(f"{hour:02d}:{minute:02d}", "%H:%M").time()

            now = datetime.now()
            # –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—à–µ–¥—à–∏–µ –¥–∞—Ç—ã –∏ –≤—Ä–µ–º—è
            if target_date.date() < now.date() or \
                    (target_date.date() == now.date() and current_slot_time <= now.time()):
                continue

            if current_slot_time not in busy_times:
                time_slots.append(current_slot_time)

    if not time_slots:
        builder.add(InlineKeyboardButton(text="‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="no_slots"))
    else:
        for time_slot in time_slots:
            builder.add(InlineKeyboardButton(text=time_slot.strftime("%H:%M"),
                                             callback_data=f"time_{time_slot.strftime('%H:%M')}"))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_calendar"))
    builder.adjust(4)
    return builder.as_markup()


def get_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()