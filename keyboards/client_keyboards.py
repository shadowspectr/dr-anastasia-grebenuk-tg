from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta


def get_client_main_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


async def get_services_keyboard(db: Database, category_id: str):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    services = await db.get_services_by_category(category_id)
    for service in services:
        builder.add(
            InlineKeyboardButton(text=f"{service.title} ({service.price} ‚ÇΩ)", callback_data=f"service_{service.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="client_book"))
    builder.adjust(1)
    return builder.as_markup()


def get_date_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    today = datetime.now()
    builder.add(InlineKeyboardButton(text="–°–µ–≥–æ–¥–Ω—è", callback_data=f"date_{today.strftime('%Y-%m-%d')}"))
    builder.add(
        InlineKeyboardButton(text="–ó–∞–≤—Ç—Ä–∞", callback_data=f"date_{(today + timedelta(days=1)).strftime('%Y-%m-%d')}"))
    return builder.as_markup()


async def get_time_slots_keyboard(target_date: datetime, db: Database):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    appointments = await db.get_appointments_for_day(target_date, status='active')
    busy_times = [app.appointment_time.time() for app in appointments]

    time_slots = []
    # ... –ª–æ–≥–∏–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–ª–æ—Ç–æ–≤ –æ—Å—Ç–∞–µ—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π ...
    for hour in range(9, 19):
        for minute in [0, 30]:
            if target_date.date() == datetime.now().date() and hour < datetime.now().hour:
                continue
            time_slot = datetime.strptime(f"{hour:02d}:{minute:02d}", "%H:%M").time()
            if time_slot not in busy_times:
                time_slots.append(time_slot)

    if not time_slots:
        builder.add(InlineKeyboardButton(text="‚ùå –ù–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="no_slots"))
    else:
        for time_slot in time_slots:
            builder.add(InlineKeyboardButton(text=time_slot.strftime("%H:%M"),
                                             callback_data=f"time_{time_slot.strftime('%H:%M')}"))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_date_choice"))
    builder.adjust(4)
    return builder.as_markup()


def get_confirmation_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()