# keyboards/client_keyboards.py

from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta, time
from typing import List


# --- –ö–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é –∏ —É—Å–ª—É–≥ (–±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π) ---

def get_client_main_keyboard():
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


async def get_services_keyboard(db: Database, category_id: str):
    builder = InlineKeyboardBuilder()
    services = await db.get_services_by_category(category_id)
    for service in services:
        builder.add(
            InlineKeyboardButton(text=f"{service.title} ({service.price} ‚ÇΩ)", callback_data=f"service_{service.id}"))
    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º", callback_data="client_book"))
    builder.adjust(1)
    return builder.as_markup()


# --- –ù–û–í–ê–Ø –õ–û–ì–ò–ö–ê –ö–õ–ê–í–ò–ê–¢–£–† –î–õ–Ø –î–ê–¢–´ –ò –í–†–ï–ú–ï–ù–ò ---

def get_upcoming_dates_keyboard():
    """
    –°–æ–∑–¥–∞–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∞ –±–ª–∏–∂–∞–π—à–∏–µ 7 –¥–Ω–µ–π (–Ω–µ —Å—á–∏—Ç–∞—è —Å–µ–≥–æ–¥–Ω—è).
    """
    builder = InlineKeyboardBuilder()
    today = datetime.now()
    # –ù–∞–∑–≤–∞–Ω–∏—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    weekdays = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    for i in range(1, 8):  # –û—Ç 1 –¥–æ 7, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å –∑–∞–≤—Ç—Ä–∞—à–Ω–µ–≥–æ –¥–Ω—è
        day = today + timedelta(days=i)
        day_str = day.strftime('%d.%m')
        weekday_str = weekdays[day.weekday()]

        builder.add(InlineKeyboardButton(
            text=f"{day_str} ({weekday_str})",
            callback_data=f"date_{day.strftime('%Y-%m-%d')}"
        ))

    builder.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()


def get_time_slots_keyboard(target_date: datetime, busy_slots: List[datetime]):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å–æ —Å–≤–æ–±–æ–¥–Ω—ã–º–∏ —Å–ª–æ—Ç–∞–º–∏ —Å —à–∞–≥–æ–º –≤ 2 —á–∞—Å–∞.
    –£—á–∏—Ç—ã–≤–∞–µ—Ç, —á—Ç–æ –∫–∞–∂–¥—ã–π –ø—Ä–∏–µ–º –¥–ª–∏—Ç—Å—è 2 —á–∞—Å–∞.
    """
    builder = InlineKeyboardBuilder()

    # --- –õ–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –∑–∞–Ω—è—Ç—ã—Ö –∏–Ω—Ç–µ—Ä–≤–∞–ª–æ–≤ ---
    # –°–æ–∑–¥–∞–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–æ –≤—Å–µ—Ö —á–∞—Å–æ–≤, –∫–æ—Ç–æ—Ä—ã–µ –∑–∞–Ω—è—Ç—ã.
    # –ï—Å–ª–∏ –∑–∞–ø–∏—Å—å –≤ 10:00, —Ç–æ –∑–∞–Ω—è—Ç—ã —á–∞—Å—ã 10 –∏ 11.
    busy_hours = set()
    for slot in busy_slots:
        slot_time = slot.astimezone().time()
        busy_hours.add(slot_time.hour)
        busy_hours.add(slot_time.hour + 1)  # –°–ª–µ–¥—É—é—â–∏–π —á–∞—Å —Ç–æ–∂–µ –∑–∞–Ω—è—Ç

    time_slots = []
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ —Å–ª–æ—Ç—ã —Å 9:00 –¥–æ 17:00 (—á—Ç–æ–±—ã –ø–æ—Å–ª–µ–¥–Ω—è—è –∑–∞–ø–∏—Å—å –≤ 17:00 –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –≤ 19:00)
    for hour in range(9, 18, 2):  # –®–∞–≥ 2 —á–∞—Å–∞: 9, 11, 13, 15, 17
        slot_time = time(hour, 0)

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–ª–æ—Ç –µ—â–µ –Ω–µ –ø—Ä–æ—à–µ–ª –¥–ª—è —Å–µ–≥–æ–¥–Ω—è—à–Ω–µ–≥–æ –¥–Ω—è
        if target_date.date() == datetime.now().date() and slot_time <= datetime.now().time():
            continue

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –Ω–∏ —Ç–µ–∫—É—â–∏–π —á–∞—Å, –Ω–∏ —Å–ª–µ–¥—É—é—â–∏–π –Ω–µ –∑–∞–Ω—è—Ç—ã
        if hour not in busy_hours and (hour + 1) not in busy_hours:
            time_slots.append(slot_time)

    if not time_slots:
        builder.add(InlineKeyboardButton(text="‚ùå –ù–∞ —ç—Ç—É –¥–∞—Ç—É –Ω–µ—Ç —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –≤—Ä–µ–º–µ–Ω–∏", callback_data="no_slots"))
    else:
        for time_slot in time_slots:
            builder.add(InlineKeyboardButton(text=time_slot.strftime("%H:%M"),
                                             callback_data=f"time_{time_slot.strftime('%H:%M')}"))

    builder.add(InlineKeyboardButton(text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–∞—Ç—ã", callback_data="back_to_date_choice"))
    builder.adjust(3)  # –ü–æ 3 –∫–Ω–æ–ø–∫–∏ –≤ —Ä—è–¥
    return builder.as_markup()


def get_confirmation_keyboard():
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()