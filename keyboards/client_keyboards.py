from aiogram.types import InlineKeyboardButton
from aiogram.utils.keyboard import InlineKeyboardBuilder
from database.db_supabase import Database
from datetime import datetime, timedelta
from aiogram import types


def get_client_main_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.row(InlineKeyboardButton(text="üìÖ –ó–∞–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —É—Å–ª—É–≥—É", callback_data="client_book"))
    return builder.as_markup()


async def get_service_categories_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º await
    categories = await db.get_service_categories()
    for category in categories:
        builder.add(InlineKeyboardButton(text=category.title, callback_data=f"category_{category.id}"))
    builder.adjust(1)
    return builder.as_markup()


# --- get_services_keyboard –î–û–õ–ñ–ù–ê –ë–´–¢–¨ ASYNC –ò AWAIT'–ò–¢–¨ build_keyboard ---
async def get_services_keyboard(db: Database, category_id: str):  # <-- –§—É–Ω–∫—Ü–∏—è async
    async def get_services():
        return await db.get_services_by_category(category_id)

    async def build_keyboard():
        services = await get_services()
        builder = InlineKeyboardBuilder()
        for service in services:
            builder.add(types.InlineKeyboardButton(
                text=f"{service.title} ({service.price} ‚ÇΩ)",
                callback_data=f"service_{service.id}"
            ))

        builder.add(types.InlineKeyboardButton(
            text="üîô –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            callback_data="back_to_category_choice"
        ))
        builder.adjust(1)
        return builder.as_markup()

    # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: await build_keyboard() ---
    # –§—É–Ω–∫—Ü–∏—è get_services_keyboard –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç markup, –∞ –Ω–µ –∫–æ—Ä—É—Ç–∏–Ω—É.
    # –ü–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ await'–∏—Ç—å build_keyboard.
    return await build_keyboard()  # <-- –ó–¥–µ—Å—å –±—ã–ª –ø—Ä–æ–ø—É—â–µ–Ω await
    # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---


# --- –§—É–Ω–∫—Ü–∏—è get_date_keyboard –î–û–õ–ñ–ù–ê –ë–´–¢–¨ ASYNC ---
async def get_date_keyboard(db: Database):
    builder = InlineKeyboardBuilder()
    today = datetime.now().date()

    available_weekdays = {1, 3, 4}  # Tuesday, Thursday, Friday

    days_added = 0

    # –°–ø–∏—Å–æ–∫ –¥–ª—è –¥–Ω–µ–π –Ω–µ–¥–µ–ª–∏ –Ω–∞ —Ä—É—Å—Å–∫–æ–º
    # –ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ - 0, –í—Ç–æ—Ä–Ω–∏–∫ - 1, ..., –í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ - 6
    days_of_week_ru = ["–ü–Ω", "–í—Ç", "–°—Ä", "–ß—Ç", "–ü—Ç", "–°–±", "–í—Å"]

    for i in range(1, 15):
        current_date = today + timedelta(days=i)

        if current_date.weekday() in available_weekdays:
            date_str = current_date.strftime('%Y-%m-%d')

            # --- –ò–°–ü–†–ê–í–õ–ï–ù–ò–ï: –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–∞—Ç—ã —Å —Ä—É—Å—Å–∫–∏–º –¥–Ω–µ–º –Ω–µ–¥–µ–ª–∏ ---
            day_name_ru = days_of_week_ru[current_date.weekday()]  # –ü–æ–ª—É—á–∞–µ–º —Å–æ–∫—Ä–∞—â–µ–Ω–Ω–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –¥–Ω—è

            button_text = f"{current_date.strftime('%d.%m')} ({day_name_ru})"
            # --- –ö–û–ù–ï–¶ –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø ---

            builder.add(types.InlineKeyboardButton(
                text=button_text,
                callback_data=f"date_{date_str}"
            ))
            days_added += 1
            # –ü–µ—Ä–µ–Ω–æ—Å –Ω–∞ –Ω–æ–≤—É—é —Å—Ç—Ä–æ–∫—É –∫–∞–∂–¥—ã–µ 3 –∫–Ω–æ–ø–∫–∏
            if days_added % 3 == 0:
                builder.adjust(3)

    # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π —Ä—è–¥ –Ω–µ –ø–æ–ª–Ω—ã–π, adjust(3) –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.
    # –õ—É—á—à–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å adjust() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤, —á—Ç–æ–±—ã –æ–Ω —Å–∞–º —Ä–∞—Å—Å—á–∏—Ç–∞–ª.
    # –ò–ª–∏ –∂–µ, –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞ –¥–ª—è adjust.
    # –ü–æ–∫–∞ —á—Ç–æ –æ—Å—Ç–∞–≤–ª—è–µ–º adjust(3) –¥–ª—è –ø—Ä–∏–º–µ—Ä–Ω–æ–≥–æ –≤–∏–¥–∞.

    # –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ —É—Å–ª—É–≥–∞–º",
        callback_data="back_to_service_choice"
    ))
    # adjust() –±–µ–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –ø—ã—Ç–∞–µ—Ç—Å—è —Ä–∞—Å–ø—Ä–µ–¥–µ–ª–∏—Ç—å –∫–Ω–æ–ø–∫–∏ –ø–æ —Ä—è–¥–∞–º.
    # –ù–æ –µ—Å–ª–∏ —É –Ω–∞—Å –µ—Å—Ç—å –∫–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥", –∫–æ—Ç–æ—Ä–∞—è –¥–æ–±–∞–≤–ª—è–µ—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ,
    # –ª—É—á—à–µ —è–≤–Ω–æ —É–∫–∞–∑–∞—Ç—å adjust –¥–ª—è –∫–Ω–æ–ø–æ–∫ –¥–Ω–µ–π, –∞ –¥–ª—è "–ù–∞–∑–∞–¥" –æ—Ç–¥–µ–ª—å–Ω–æ.
    # –ò–ª–∏, –ø—Ä–æ—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å adjust(1) –¥–ª—è –≤—Å–µ—Ö, –µ—Å–ª–∏ —Ä—è–¥—ã –Ω–µ –∫—Ä–∏—Ç–∏—á–Ω—ã.
    # –ó–¥–µ—Å—å –ø–æ–ø—Ä–æ–±—É–µ–º adjust(1) –¥–ª—è –≤—Å–µ—Ö, —á—Ç–æ–±—ã –±—ã–ª–æ –ø—Ä–µ–¥—Å–∫–∞–∑—É–µ–º–æ.
    builder.adjust(1)  # –î–ª—è –≤—Å–µ—Ö –∫–Ω–æ–ø–æ–∫, –≤–∫–ª—é—á–∞—è "–ù–∞–∑–∞–¥"

    return builder.as_markup()


# --- –§—É–Ω–∫—Ü–∏—è get_time_slots_keyboard ---
# –û–Ω–∞ —É–∂–µ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å async, —Ç–∞–∫ –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç db.get_appointments_for_day
async def get_time_slots_keyboard(target_date: datetime, db: Database):
    builder = InlineKeyboardBuilder()

    try:
        # --- –í–ê–ñ–ù–û: db.get_appointments_for_day - ASYNC –ú–ï–¢–û–î ---
        appointments_on_day = await db.get_appointments_for_day(target_date)
        booked_times = {app.appointment_time.strftime('%H:%M') for app in appointments_on_day if app.appointment_time}
    except Exception as e:
        logger.error(f"Error fetching appointments for time slot check on {target_date.date()}: {e}")
        booked_times = set()

    start_hour = 9
    end_hour = 18
    slot_interval_minutes = 60

    current_time = target_date.replace(hour=start_hour, minute=0, second=0, microsecond=0)

    while current_time.hour < end_hour:
        slot_time_str = current_time.strftime('%H:%M')

        if slot_time_str not in booked_times:
            builder.add(types.InlineKeyboardButton(
                text=slot_time_str,
                callback_data=f"time_{slot_time_str}"
            ))
        else:
            pass  # –ù–µ –¥–æ–±–∞–≤–ª—è–µ–º –∑–∞–Ω—è—Ç—ã–µ —Å–ª–æ—Ç—ã

        current_time += timedelta(minutes=slot_interval_minutes)

    builder.add(types.InlineKeyboardButton(
        text="üîô –ù–∞–∑–∞–¥ –∫ –≤—ã–±–æ—Ä—É –¥–Ω—è",
        callback_data="back_to_date_choice"
    ))
    builder.adjust(3)
    return builder.as_markup()


def get_confirmation_keyboard():
    # –≠—Ç–∞ —Ñ—É–Ω–∫—Ü–∏—è –Ω–µ –æ–±—Ä–∞—â–∞–µ—Ç—Å—è –∫ –ë–î, –æ—Å—Ç–∞–µ—Ç—Å—è —Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–π
    builder = InlineKeyboardBuilder()
    builder.add(InlineKeyboardButton(text="‚úÖ –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å –∑–∞–ø–∏—Å—å", callback_data="confirm_booking"))
    builder.add(InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å", callback_data="cancel_booking"))
    return builder.as_markup()